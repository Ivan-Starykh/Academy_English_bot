import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(level=logging.INFO)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.txt"

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    if not os.path.exists(USERS_FILE):
        return set()
    with open(USERS_FILE, "r") as file:
        users = {line.strip() for line in file}
    return users

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user(user_id):
    with open(USERS_FILE, "a") as file:
        file.write(f"{user_id}\n")

async def start(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    user_first_name = update.message.from_user.first_name
    
    users = load_users()
    
    if user_id in users:
        message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_first_name}!"
    else:
        message = f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç."
        save_user(user_id)
    
    await update.message.reply_text(message)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    image_path = './images/1125.jpg'
    caption = (
        '–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, '
        '–∏–∑—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∏ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.'
    )
    
    try:
        with open(image_path, 'rb') as photo:
            await update.message.reply_photo(photo=InputFile(photo), caption=caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(update)

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"
    menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîç"), KeyboardButton(text="–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç üë§")]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=menu_keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
async def show_main_menu(update: Update) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data='gift')],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='test')],
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∫–æ–ª–µ", callback_data='about_school')],
        [InlineKeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data='results')],
        [InlineKeyboardButton("–û—Ç–∑—ã–≤—ã", callback_data='reviews')],
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è", callback_data='programs')],
        [InlineKeyboardButton("–í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data='manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîß", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'gift':
        await query.edit_message_text(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: ...")
    elif query.data == 'test':
        await query.edit_message_text(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ...")
    elif query.data == 'about_school':
        await query.edit_message_text(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∫–æ–ª–µ: ...")
    elif query.data == 'results':
        await query.edit_message_text(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ...")
    elif query.data == 'reviews':
        await query.edit_message_text(text="–û—Ç–∑—ã–≤—ã: ...")
    elif query.data == 'programs':
        await query.edit_message_text(text="–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è: ...")
    elif query.data == 'manager':
        await query.edit_message_text(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
async def handle_main_menu_button(update: Update, context: CallbackContext) -> None:
    if update.message.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîç":
        await show_main_menu(update)

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.Text("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîç"), handle_main_menu_button))

    application.run_polling()

if __name__ == '__main__':
    main()








# import logging
# import os
# from aiogram import Bot, Dispatcher, types, F
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
# from aiogram.fsm.storage.memory import MemoryStorage
# from dotenv import load_dotenv
# from aiogram.filters import Command
# from aiogram.types.input_file import FSInputFile

# # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
# load_dotenv()
# TOKEN = os.getenv('TELEGRAM_TOKEN')

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=TOKEN)
# storage = MemoryStorage()
# dp = Dispatcher(storage=storage)

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)

# # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# USERS_FILE = 'users.txt'

# # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
# def load_users():
#     if not os.path.exists(USERS_FILE):
#         return set()
#     with open(USERS_FILE, 'r') as file:
#         users = {line.strip() for line in file}
#     return users

# # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
# def save_user(user_id):
#     with open(USERS_FILE, 'a') as file:
#         file.write(f"{user_id}\n")

# @dp.message(Command('start'))
# async def start_command(message: types.Message):
#     user_id = str(message.from_user.id)
#     user_first_name = message.from_user.first_name
    
#     users = load_users()
    
#     if user_id in users:
#         welcome_message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_first_name}!"
#     else:
#         welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç."
#         save_user(user_id)
    
#     await message.answer(welcome_message)
    
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
#     image_path = './images/1125.jpg'  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
#     try:
#         photo = FSInputFile(image_path)
#         await bot.send_photo(chat_id=message.chat.id, photo=photo)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
#     description = ('–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, '
#                    '–∏–∑—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∏ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.')
#     await message.answer(description)
    
#     # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data='gift')],
#         [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='test')],
#         [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∫–æ–ª–µ", callback_data='about_school')],
#         [InlineKeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data='results')],
#         [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data='reviews')],
#         [InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è", callback_data='programs')],
#         [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data='manager')]
#     ])
    
#     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

#     # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"
#     menu_keyboard = ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîç"), KeyboardButton(text="–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç üë§")]
#         ],
#         resize_keyboard=True
#     )
#     # await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=menu_keyboard)

# @dp.callback_query(lambda callback_query: True)
# async def process_callback(callback_query: types.CallbackQuery):
#     data = callback_query.data
    
#     if data == 'gift':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: ...")
#     elif data == 'test':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ...")
#     elif data == 'about_school':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∫–æ–ª–µ: ...")
#     elif data == 'results':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ...")
#     elif data == 'reviews':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–û—Ç–∑—ã–≤—ã: ...")
#     elif data == 'programs':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è: ...")
#     elif data == 'manager':
#         await bot.answer_callback_query(callback_query.id)
#         await bot.send_message(callback_query.from_user.id, "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ...")

# async def main():
#     await dp.start_polling(bot, skip_updates=True)

# if __name__ == '__main__':
#     import asyncio
#     asyncio.run(main())


